name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions: # Add top-level permissions
  contents: write
  packages: write
  security-events: write
  actions: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'
          check-latest: true
          
      - name: Install dependencies
        run: go mod download
        
      - name: Run tests
        run: go test -v ./...

  build-and-release:
    name: Build and Release
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write
      actions: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Install Cosign for image signing
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.4.0
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Generate semantic version
        id: semver
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          bump_each_commit: true
          bump_each_commit_patch_pattern: "fix:"
          search_commit_body: true
          version_format: "${major}.${minor}.${patch}"
          enable_prerelease_mode: false
      
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      # Scan for vulnerabilities (only if image was built and pushed)
      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      # Upload scan results to GitHub Security tab (only if scan was performed)
      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request' && success()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # Sign the container image (only if image was pushed)
      - name: Sign the container image
        if: github.event_name != 'pull_request' && success()
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing image with digest: ${{ steps.build.outputs.digest }}"
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      
      # Create Release (only on tag push)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') && success()
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.semver.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }} 